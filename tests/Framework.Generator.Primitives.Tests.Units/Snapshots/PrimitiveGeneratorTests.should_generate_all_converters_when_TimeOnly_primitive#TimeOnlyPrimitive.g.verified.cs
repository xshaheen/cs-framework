//HintName: TimeOnlyPrimitive.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'Primitives Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Numerics;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Framework.Generator.Primitives;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using Framework.Primitives.Converters;
using System.ComponentModel;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace Framework.Primitives;

[JsonConverter(typeof(TimeOnlyPrimitiveJsonConverter))]
[TypeConverter(typeof(TimeOnlyPrimitiveTypeConverter))]
[UnderlyingPrimitiveType(typeof(TimeOnly))]
[DebuggerDisplay("{" + nameof(_value) + "}")]
public readonly partial struct TimeOnlyPrimitive : global::System.IEquatable<TimeOnlyPrimitive>
        , global::System.IComparable
        , global::System.IComparable<TimeOnlyPrimitive>
        , global::System.Numerics.IComparisonOperators<TimeOnlyPrimitive, TimeOnlyPrimitive, bool>
        , global::System.ISpanFormattable
        , global::System.ISpanParsable<TimeOnlyPrimitive>
        , global::System.IConvertible
        , global::System.Xml.Serialization.IXmlSerializable
#if NET8_0_OR_GREATER
        , global::System.IUtf8SpanFormattable
#endif
{
    /// <inheritdoc/>
    public Type GetUnderlyingPrimitiveType() => typeof(TimeOnly);

    /// <inheritdoc/>
    public TimeOnly GetUnderlyingPrimitiveValue() => this;

    private TimeOnly _valueOrThrow => _isInitialized ? _value : throw new InvalidPrimitiveValueException("The domain value has not been initialized", this);

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly TimeOnly _value;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly bool _isInitialized;

    /// <summary>Initializes a new instance of the <see cref="TimeOnlyPrimitive"/> class by validating the specified <see cref="TimeOnly"/> value using <see cref="Validate"/> static method.</summary>
    /// <param name="value">The value to be validated.</param>
    public TimeOnlyPrimitive(TimeOnly value) : this(value, true) { }

    private TimeOnlyPrimitive(TimeOnly value, bool validate)
    {
        if (validate)
        {
            ValidateOrThrow(value);
        }
        _value = value;
        _isInitialized = true;
    }

#pragma warning disable AL1003 // Should not have non obsolete empty constructors.
    [Obsolete("Primitive cannot be created using empty Constructor", true)]
    public TimeOnlyPrimitive() { }
#pragma warning restore AL1003

    /// <summary>Tries to create an instance of AsciiString from the specified value.</summary>
    /// <param name="value">The value to create TimeOnlyPrimitive from</param>
    /// <param name="result">When this method returns, contains the created TimeOnlyPrimitive if the conversion succeeded, or null if the conversion failed.</param>
    /// <returns>true if the conversion succeeded; otherwise, false.</returns>
    public static bool TryCreate(TimeOnly value, [NotNullWhen(true)] out TimeOnlyPrimitive? result)
    {
        return TryCreate(value, out result, out _);
    }

    /// <summary>Tries to create an instance of AsciiString from the specified value.</summary>
    /// <param name="value">The value to create TimeOnlyPrimitive from</param>
    /// <param name="result">When this method returns, contains the created TimeOnlyPrimitive if the conversion succeeded, or null if the conversion failed.</param>
    /// <param name="errorMessage">When this method returns, contains the error message if the conversion failed; otherwise, null.</param>
    /// <returns>true if the conversion succeeded; otherwise, false.</returns>
    public static bool TryCreate(TimeOnly value,[NotNullWhen(true)]  out TimeOnlyPrimitive? result, [NotNullWhen(false)]  out string? errorMessage)
    {
        var validationResult = Validate(value);

        if (!validationResult.IsValid)
        {
            result = null;
            errorMessage = validationResult.ErrorMessage;
            return false;
        }

        result = new (value, false);
        errorMessage = null;
        return true;
    }

    /// <summary>Validates the specified value and throws an exception if it is not valid.</summary>
    /// <param name="value">The value to validate</param>
    /// <exception cref="InvalidPrimitiveValueException">Thrown when the value is not valid.</exception>
    public void ValidateOrThrow(TimeOnly value)
    {
        var result = Validate(value);

        if (!result.IsValid)
        {
            throw new InvalidPrimitiveValueException(result.ErrorMessage, this);
        }
    }

    #region IEquatable Implementation

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override bool Equals(object? obj) => obj is TimeOnlyPrimitive other && Equals(other);

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool Equals(TimeOnlyPrimitive other)
    {
        if (!_isInitialized || !other._isInitialized)
        {
            return false;
        }

        return _value.Equals(other._value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator ==(TimeOnlyPrimitive left, TimeOnlyPrimitive right) => left.Equals(right);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator !=(TimeOnlyPrimitive left, TimeOnlyPrimitive right) => !(left == right);

    #endregion

    #region IComparable Implementation

    /// <inheritdoc/>
    public int CompareTo(object? obj)
    {
        return obj switch
        {
            null => 1,
            TimeOnlyPrimitive c => CompareTo(c),
            _ => throw new ArgumentException("Object is not a TimeOnlyPrimitive", nameof(obj)),
        };
    }

    /// <inheritdoc/>
    public int CompareTo(TimeOnlyPrimitive other)
    {
        if (!other._isInitialized)
        {
            return 1;
        }

        if (!_isInitialized)
        {
            return -1;
        }

        return _value.CompareTo(other._value);
    }

    #endregion

    #region IParsable Implementation

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TimeOnlyPrimitive Parse(ReadOnlySpan<char> s, IFormatProvider? provider) => TimeOnly.Parse(s, provider);

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TimeOnlyPrimitive Parse(string s, IFormatProvider? provider) => Parse(s.AsSpan(), provider);

    /// <inheritdoc/>
    public static bool TryParse(ReadOnlySpan<char> s, IFormatProvider? provider, [MaybeNullWhen(false)] out TimeOnlyPrimitive result)
    {
        if (!TimeOnly.TryParse(s, provider, out var value))
        {
            result = default;
            return false;
        }

        if (TryCreate(value, out var created))
        {
            result = created.Value;
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc/>
    public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, [MaybeNullWhen(false)] out TimeOnlyPrimitive result) => TryParse(s is null ? [] : s.AsSpan(), provider, out result);

    #endregion

    #region IFormattable Implementation

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ToString(string? format, IFormatProvider? formatProvider) => _valueOrThrow.ToString(format, formatProvider);

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        return ((ISpanFormattable)_valueOrThrow).TryFormat(destination, out charsWritten, format, provider);
    }

    #endregion

    #region IUtf8SpanFormattable Implementation

#if NET8_0_OR_GREATER
    /// <inheritdoc cref="IUtf8SpanFormattable.TryFormat"/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        return ((IUtf8SpanFormattable)_valueOrThrow).TryFormat(utf8Destination, out bytesWritten, format, provider);
    }
#endif

    #endregion

    #region IConvertible Implementation

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    TypeCode IConvertible.GetTypeCode() => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).GetTypeCode();

    /// <inheritdoc/>
    bool IConvertible.ToBoolean(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToBoolean(provider);

    /// <inheritdoc/>
    byte IConvertible.ToByte(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToByte(provider);

    /// <inheritdoc/>
    char IConvertible.ToChar(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToChar(provider);

    /// <inheritdoc/>
    DateTime IConvertible.ToDateTime(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToDateTime(provider);

    /// <inheritdoc/>
    decimal IConvertible.ToDecimal(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToDecimal(provider);

    /// <inheritdoc/>
    double IConvertible.ToDouble(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToDouble(provider);

    /// <inheritdoc/>
    short IConvertible.ToInt16(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToInt16(provider);

    /// <inheritdoc/>
    int IConvertible.ToInt32(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToInt32(provider);

    /// <inheritdoc/>
    long IConvertible.ToInt64(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToInt64(provider);

    /// <inheritdoc/>
    sbyte IConvertible.ToSByte(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToSByte(provider);

    /// <inheritdoc/>
    float IConvertible.ToSingle(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToSingle(provider);

    /// <inheritdoc/>
    string IConvertible.ToString(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToString(provider);

    /// <inheritdoc/>
    object IConvertible.ToType(Type conversionType, IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToType(conversionType, provider);

    /// <inheritdoc/>
    ushort IConvertible.ToUInt16(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToUInt16(provider);

    /// <inheritdoc/>
    uint IConvertible.ToUInt32(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToUInt32(provider);

    /// <inheritdoc/>
    ulong IConvertible.ToUInt64(IFormatProvider? provider) => ((IConvertible)((TimeOnly)_valueOrThrow).ToDateTime()).ToUInt64(provider);

    #endregion

    #region IXmlSerializable Implementation

    /// <inheritdoc/>
    public XmlSchema? GetSchema() => null;

    /// <inheritdoc/>
    public void ReadXml(XmlReader reader)
    {
        var value = reader.ReadElementContentAs<TimeOnly>();
        ValidateOrThrow(value);
        System.Runtime.CompilerServices.Unsafe.AsRef(in _value) = value;
        System.Runtime.CompilerServices.Unsafe.AsRef(in _isInitialized) = true;
    }

    /// <inheritdoc/>
    public void WriteXml(XmlWriter writer) => writer.WriteValue(((TimeOnly)_valueOrThrow).ToXmlString());

    #endregion

    #region Implicit Operators

    /// <summary>Implicit conversion from <see cref = "TimeOnly"/> to <see cref = "TimeOnlyPrimitive"/></summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator TimeOnlyPrimitive(TimeOnly value) => new(value);

    /// <summary>Implicit conversion from <see cref = "TimeOnly"/> (nullable) to <see cref = "TimeOnlyPrimitive"/> (nullable)</summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [return: NotNullIfNotNull(nameof(value))]
    public static implicit operator TimeOnlyPrimitive?(TimeOnly? value) => value is null ? null : new(value.Value);

    /// <summary>Implicit conversion from <see cref = "TimeOnlyPrimitive"/> to <see cref = "TimeOnly"/></summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator TimeOnly(TimeOnlyPrimitive value) => (TimeOnly)value._valueOrThrow;

    /// <summary>Implicit conversion from <see cref = "TimeOnlyPrimitive"/> (nullable) to <see cref = "TimeOnly"/> (nullable)</summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [return: NotNullIfNotNull(nameof(value))]
    public static implicit operator TimeOnly?(TimeOnlyPrimitive? value) => value is null ? null : (TimeOnly?)value.Value._valueOrThrow;

    /// <summary>Implicit conversion from <see cref = "TimeOnlyPrimitive"/> to <see cref = "DateTime"/></summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator DateTime(TimeOnlyPrimitive value) => ((TimeOnly)value._valueOrThrow).ToDateTime();

    /// <summary>Implicit conversion from <see cref = "DateTime"/> to <see cref = "TimeOnlyPrimitive"/></summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator TimeOnlyPrimitive(DateTime value) => TimeOnly.FromDateTime(value);

    #endregion

    #region Comparison Operators

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator <(TimeOnlyPrimitive left, TimeOnlyPrimitive right) => left._valueOrThrow < right._valueOrThrow;

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator <=(TimeOnlyPrimitive left, TimeOnlyPrimitive right) => left._valueOrThrow <= right._valueOrThrow;

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator >(TimeOnlyPrimitive left, TimeOnlyPrimitive right) => left._valueOrThrow > right._valueOrThrow;

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator >=(TimeOnlyPrimitive left, TimeOnlyPrimitive right) => left._valueOrThrow >= right._valueOrThrow;

    #endregion

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override string ToString() => _valueOrThrow.ToString();

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override int GetHashCode() => _valueOrThrow.GetHashCode();
}
