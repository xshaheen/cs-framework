//HintName: CharPrimitive.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'Primitives Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Numerics;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Framework.Generator.Primitives;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using Framework.Primitives.Converters;
using System.ComponentModel;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace Framework.Primitives;

[JsonConverter(typeof(CharPrimitiveJsonConverter))]
[TypeConverter(typeof(CharPrimitiveTypeConverter))]
[UnderlyingPrimitiveType(typeof(char))]
[DebuggerDisplay("{" + nameof(_value) + "}")]
public readonly partial struct CharPrimitive : IEquatable<CharPrimitive>
        , IComparable
        , IComparable<CharPrimitive>
        , IComparisonOperators<CharPrimitive, CharPrimitive, bool>
        , ISpanParsable<CharPrimitive>
        , IConvertible
        , IXmlSerializable
#if NET8_0_OR_GREATER
        , IUtf8SpanFormattable
#endif
{
    /// <inheritdoc/>
    public Type GetUnderlyingPrimitiveType() => typeof(char);

    /// <inheritdoc/>
    public char GetUnderlyingPrimitiveValue() => this;

    private char _valueOrThrow => _isInitialized ? _value : throw new InvalidPrimitiveValueException("The domain value has not been initialized", this);

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly char _value;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly bool _isInitialized;

    /// <summary>Initializes a new instance of the <see cref="CharPrimitive"/> class by validating the specified <see cref="char"/> value using <see cref="Validate"/> static method.</summary>
    /// <param name="value">The value to be validated.</param>
    public CharPrimitive(char value) : this(value, true) { }

    private CharPrimitive(char value, bool validate)
    {
        if (validate)
        {
            ValidateOrThrow(value);
        }
        _value = value;
        _isInitialized = true;
    }

#pragma warning disable AL1003 // Should not have non obsolete empty constructors.
    [Obsolete("Primitive cannot be created using empty Constructor", true)]
    public CharPrimitive() { }
#pragma warning restore AL1003

    /// <summary>Tries to create an instance of AsciiString from the specified value.</summary>
    /// <param name="value">The value to create CharPrimitive from</param>
    /// <param name="result">When this method returns, contains the created CharPrimitive if the conversion succeeded, or null if the conversion failed.</param>
    /// <returns>true if the conversion succeeded; otherwise, false.</returns>
    public static bool TryCreate(char value, [NotNullWhen(true)] out CharPrimitive? result)
    {
        return TryCreate(value, out result, out _);
    }

    /// <summary>Tries to create an instance of AsciiString from the specified value.</summary>
    /// <param name="value">The value to create CharPrimitive from</param>
    /// <param name="result">When this method returns, contains the created CharPrimitive if the conversion succeeded, or null if the conversion failed.</param>
    /// <param name="errorMessage">When this method returns, contains the error message if the conversion failed; otherwise, null.</param>
    /// <returns>true if the conversion succeeded; otherwise, false.</returns>
    public static bool TryCreate(char value,[NotNullWhen(true)]  out CharPrimitive? result, [NotNullWhen(false)]  out string? errorMessage)
    {
        var validationResult = Validate(value);

        if (!validationResult.IsValid)
        {
            result = null;
            errorMessage = validationResult.ErrorMessage;
            return false;
        }

        result = new (value, false);
        errorMessage = null;
        return true;
    }

    /// <summary>Validates the specified value and throws an exception if it is not valid.</summary>
    /// <param name="value">The value to validate</param>
    /// <exception cref="InvalidPrimitiveValueException">Thrown when the value is not valid.</exception>
    public void ValidateOrThrow(char value)
    {
        var result = Validate(value);

        if (!result.IsValid)
        {
            throw new InvalidPrimitiveValueException(result.ErrorMessage, this);
        }
    }

    #region IEquatable Implementation

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override bool Equals(object? obj) => obj is CharPrimitive other && Equals(other);

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool Equals(CharPrimitive other)
    {
        if (!_isInitialized || !other._isInitialized)
        {
            return false;
        }

        return _value.Equals(other._value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator ==(CharPrimitive left, CharPrimitive right) => left.Equals(right);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator !=(CharPrimitive left, CharPrimitive right) => !(left == right);

    #endregion

    #region IComparable Implementation

    /// <inheritdoc/>
    public int CompareTo(object? obj)
    {
        return obj switch
        {
            null => 1,
            CharPrimitive c => CompareTo(c),
            _ => throw new ArgumentException("Object is not a CharPrimitive", nameof(obj)),
        };
    }

    /// <inheritdoc/>
    public int CompareTo(CharPrimitive other)
    {
        if (!other._isInitialized)
        {
            return 1;
        }

        if (!_isInitialized)
        {
            return -1;
        }

        return _value.CompareTo(other._value);
    }

    #endregion

    #region IParsable Implementation

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static CharPrimitive Parse(ReadOnlySpan<char> s, IFormatProvider? provider) => char.Parse(s);

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static CharPrimitive Parse(string s, IFormatProvider? provider) => Parse(s.AsSpan(), provider);

    /// <inheritdoc/>
    public static bool TryParse(ReadOnlySpan<char> s, IFormatProvider? provider, [MaybeNullWhen(false)] out CharPrimitive result)
    {
        if (!char.TryParse(s, out var value))
        {
            result = default;
            return false;
        }

        if (TryCreate(value, out var created))
        {
            result = created.Value;
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc/>
    public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, [MaybeNullWhen(false)] out CharPrimitive result) => TryParse(s is null ? [] : s.AsSpan(), provider, out result);

    #endregion

    #region IUtf8SpanFormattable Implementation

#if NET8_0_OR_GREATER
    /// <inheritdoc cref="IUtf8SpanFormattable.TryFormat"/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        return ((IUtf8SpanFormattable)_valueOrThrow).TryFormat(utf8Destination, out bytesWritten, format, provider);
    }
#endif

    #endregion

    #region IConvertible Implementation

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    TypeCode IConvertible.GetTypeCode() => ((IConvertible)(Char)_valueOrThrow).GetTypeCode();

    /// <inheritdoc/>
    bool IConvertible.ToBoolean(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToBoolean(provider);

    /// <inheritdoc/>
    byte IConvertible.ToByte(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToByte(provider);

    /// <inheritdoc/>
    char IConvertible.ToChar(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToChar(provider);

    /// <inheritdoc/>
    DateTime IConvertible.ToDateTime(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToDateTime(provider);

    /// <inheritdoc/>
    decimal IConvertible.ToDecimal(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToDecimal(provider);

    /// <inheritdoc/>
    double IConvertible.ToDouble(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToDouble(provider);

    /// <inheritdoc/>
    short IConvertible.ToInt16(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToInt16(provider);

    /// <inheritdoc/>
    int IConvertible.ToInt32(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToInt32(provider);

    /// <inheritdoc/>
    long IConvertible.ToInt64(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToInt64(provider);

    /// <inheritdoc/>
    sbyte IConvertible.ToSByte(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToSByte(provider);

    /// <inheritdoc/>
    float IConvertible.ToSingle(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToSingle(provider);

    /// <inheritdoc/>
    string IConvertible.ToString(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToString(provider);

    /// <inheritdoc/>
    object IConvertible.ToType(Type conversionType, IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToType(conversionType, provider);

    /// <inheritdoc/>
    ushort IConvertible.ToUInt16(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToUInt16(provider);

    /// <inheritdoc/>
    uint IConvertible.ToUInt32(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToUInt32(provider);

    /// <inheritdoc/>
    ulong IConvertible.ToUInt64(IFormatProvider? provider) => ((IConvertible)(Char)_valueOrThrow).ToUInt64(provider);

    #endregion

    #region IXmlSerializable Implementation

    /// <inheritdoc/>
    public XmlSchema? GetSchema() => null;

    /// <inheritdoc/>
    public void ReadXml(XmlReader reader)
    {
        var value = reader.ReadElementContentAs<char>();
        ValidateOrThrow(value);
        System.Runtime.CompilerServices.Unsafe.AsRef(in _value) = value;
        System.Runtime.CompilerServices.Unsafe.AsRef(in _isInitialized) = true;
    }

    /// <inheritdoc/>
    public void WriteXml(XmlWriter writer) => writer.WriteValue(((char)_valueOrThrow).ToXmlString());

    #endregion

    #region Implicit Operators

    /// <summary>Implicit conversion from <see cref = "char"/> to <see cref = "CharPrimitive"/></summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator CharPrimitive(char value) => new(value);

    /// <summary>Implicit conversion from <see cref = "char"/> (nullable) to <see cref = "CharPrimitive"/> (nullable)</summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [return: NotNullIfNotNull(nameof(value))]
    public static implicit operator CharPrimitive?(char? value) => value is null ? null : new(value.Value);

    /// <summary>Implicit conversion from <see cref = "CharPrimitive"/> to <see cref = "char"/></summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator char(CharPrimitive value) => (char)value._valueOrThrow;

    /// <summary>Implicit conversion from <see cref = "CharPrimitive"/> (nullable) to <see cref = "char"/> (nullable)</summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [return: NotNullIfNotNull(nameof(value))]
    public static implicit operator char?(CharPrimitive? value) => value is null ? null : (char?)value.Value._valueOrThrow;

    #endregion

    #region Comparison Operators

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator <(CharPrimitive left, CharPrimitive right) => left._valueOrThrow < right._valueOrThrow;

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator <=(CharPrimitive left, CharPrimitive right) => left._valueOrThrow <= right._valueOrThrow;

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator >(CharPrimitive left, CharPrimitive right) => left._valueOrThrow > right._valueOrThrow;

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool operator >=(CharPrimitive left, CharPrimitive right) => left._valueOrThrow >= right._valueOrThrow;

    #endregion

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override string ToString() => _valueOrThrow.ToString();

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override int GetHashCode() => _valueOrThrow.GetHashCode();
}
