//HintName: DateTimePrimitive.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'Primitives Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Numerics;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Framework.Generator.Primitives;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using Framework.Primitives.Converters;
using System.ComponentModel;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace Framework.Primitives;

[UnderlyingPrimitiveType(typeof(DateTime))]
[global::System.Diagnostics.DebuggerDisplay("{_value}")]
[global::System.Text.Json.Serialization.JsonConverter(typeof(DateTimePrimitiveJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(DateTimePrimitiveTypeConverter))]
public readonly partial struct DateTimePrimitive : global::System.IEquatable<DateTimePrimitive>
        , global::System.IComparable
        , global::System.IComparable<DateTimePrimitive>
        , global::System.Numerics.IComparisonOperators<DateTimePrimitive, DateTimePrimitive, bool>
        , global::System.ISpanFormattable
        , global::System.ISpanParsable<DateTimePrimitive>
        , global::System.IConvertible
        , global::System.Xml.Serialization.IXmlSerializable
#if NET8_0_OR_GREATER
        , global::System.IUtf8SpanFormattable
#endif
{
    /// <inheritdoc/>
    public Type GetUnderlyingPrimitiveType() => typeof(DateTime);

    /// <inheritdoc/>
    public DateTime GetUnderlyingPrimitiveValue() => this;

    private DateTime _valueOrThrow => _isInitialized ? _value : throw new InvalidPrimitiveValueException("The domain value has not been initialized", this);

    [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
    private readonly DateTime _value;

    [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
    private readonly bool _isInitialized;

    /// <summary>Initializes a new instance of the <see cref="DateTimePrimitive"/> class by validating the specified <see cref="DateTime"/> value using <see cref="Validate"/> static method.</summary>
    /// <param name="value">The value to be validated.</param>
    public DateTimePrimitive(DateTime value) : this(value, true) { }

    private DateTimePrimitive(DateTime value, bool validate)
    {
        if (validate)
        {
            ValidateOrThrow(value);
        }
        _value = value;
        _isInitialized = true;
    }

#pragma warning disable AL1003 // Should not have non obsolete empty constructors.
    [Obsolete("Primitive cannot be created using empty Constructor", true)]
    public DateTimePrimitive() { }
#pragma warning restore AL1003

    /// <summary>Tries to create an instance of AsciiString from the specified value.</summary>
    /// <param name="value">The value to create DateTimePrimitive from</param>
    /// <param name="result">When this method returns, contains the created DateTimePrimitive if the conversion succeeded, or null if the conversion failed.</param>
    /// <returns>true if the conversion succeeded; otherwise, false.</returns>
    public static bool TryCreate(DateTime value, [NotNullWhen(true)] out DateTimePrimitive? result)
    {
        return TryCreate(value, out result, out _);
    }

    /// <summary>Tries to create an instance of AsciiString from the specified value.</summary>
    /// <param name="value">The value to create DateTimePrimitive from</param>
    /// <param name="result">When this method returns, contains the created DateTimePrimitive if the conversion succeeded, or null if the conversion failed.</param>
    /// <param name="errorMessage">When this method returns, contains the error message if the conversion failed; otherwise, null.</param>
    /// <returns>true if the conversion succeeded; otherwise, false.</returns>
    public static bool TryCreate(DateTime value,[NotNullWhen(true)]  out DateTimePrimitive? result, [NotNullWhen(false)]  out string? errorMessage)
    {
        var validationResult = Validate(value);

        if (!validationResult.IsValid)
        {
            result = null;
            errorMessage = validationResult.ErrorMessage;
            return false;
        }

        result = new (value, false);
        errorMessage = null;
        return true;
    }

    /// <summary>Validates the specified value and throws an exception if it is not valid.</summary>
    /// <param name="value">The value to validate</param>
    /// <exception cref="InvalidPrimitiveValueException">Thrown when the value is not valid.</exception>
    public void ValidateOrThrow(DateTime value)
    {
        var result = Validate(value);

        if (!result.IsValid)
        {
            throw new InvalidPrimitiveValueException(result.ErrorMessage, this);
        }
    }

    #region IEquatable Implementation

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override bool Equals(object? obj) => obj is DateTimePrimitive other && Equals(other);

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public bool Equals(DateTimePrimitive other)
    {
        if (!_isInitialized || !other._isInitialized)
        {
            return false;
        }

        return _value.Equals(other._value);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator ==(DateTimePrimitive left, DateTimePrimitive right) => left.Equals(right);

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator !=(DateTimePrimitive left, DateTimePrimitive right) => !(left == right);

    #endregion

    #region IComparable Implementation

    /// <inheritdoc/>
    public int CompareTo(object? obj)
    {
        return obj switch
        {
            null => 1,
            DateTimePrimitive c => CompareTo(c),
            _ => throw new ArgumentException("Object is not a DateTimePrimitive", nameof(obj)),
        };
    }

    /// <inheritdoc/>
    public int CompareTo(DateTimePrimitive other)
    {
        if (!other._isInitialized)
        {
            return 1;
        }

        if (!_isInitialized)
        {
            return -1;
        }

        return _value.CompareTo(other._value);
    }

    #endregion

    #region IParsable Implementation

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static DateTimePrimitive Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider? provider) => DateTime.Parse(s, provider);

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static DateTimePrimitive Parse(string s, global::System.IFormatProvider? provider) => Parse(s.AsSpan(), provider);

    /// <inheritdoc/>
    public static bool TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider? provider, [MaybeNullWhen(false)] out DateTimePrimitive result)
    {
        if (!DateTime.TryParse(s, provider, out var value))
        {
            result = default;
            return false;
        }

        if (TryCreate(value, out var created))
        {
            result = created.Value;
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc/>
    public static bool TryParse([NotNullWhen(true)] string? s, global::System.IFormatProvider? provider, [MaybeNullWhen(false)] out DateTimePrimitive result) => TryParse(s is null ? [] : s.AsSpan(), provider, out result);

    #endregion

    #region IFormattable Implementation

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public string ToString([global::System.Diagnostics.CodeAnalysis.StringSyntax(global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat)]string? format, global::System.IFormatProvider? formatProvider) => _valueOrThrow.ToString(format, formatProvider);

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public bool TryFormat(global::System.Span<char> destination, out int charsWritten, [global::System.Diagnostics.CodeAnalysis.StringSyntax(global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat)]global::System.ReadOnlySpan<char> format, global::System.IFormatProvider? provider)
    {
        return ((global::System.ISpanFormattable)_valueOrThrow).TryFormat(destination, out charsWritten, format, provider);
    }

    #endregion

    #region IUtf8SpanFormattable Implementation

#if NET8_0_OR_GREATER
    /// <inheritdoc cref="global::System.IUtf8SpanFormattable.TryFormat"/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public bool TryFormat(global::System.Span<byte> utf8Destination, out int bytesWritten, [global::System.Diagnostics.CodeAnalysis.StringSyntax(global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat)]global::System.ReadOnlySpan<char> format, global::System.IFormatProvider? provider)
    {
        return ((global::System.IUtf8SpanFormattable)_valueOrThrow).TryFormat(utf8Destination, out bytesWritten, format, provider);
    }
#endif

    #endregion

    #region IConvertible Implementation

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    global::System.TypeCode global::System.IConvertible.GetTypeCode() => ((global::System.IConvertible)(DateTime)_valueOrThrow).GetTypeCode();

    /// <inheritdoc/>
    bool global::System.IConvertible.ToBoolean(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToBoolean(provider);

    /// <inheritdoc/>
    byte global::System.IConvertible.ToByte(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToByte(provider);

    /// <inheritdoc/>
    char global::System.IConvertible.ToChar(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToChar(provider);

    /// <inheritdoc/>
    global::System.DateTime global::System.IConvertible.ToDateTime(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToDateTime(provider);

    /// <inheritdoc/>
    decimal global::System.IConvertible.ToDecimal(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToDecimal(provider);

    /// <inheritdoc/>
    double global::System.IConvertible.ToDouble(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToDouble(provider);

    /// <inheritdoc/>
    short global::System.IConvertible.ToInt16(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToInt16(provider);

    /// <inheritdoc/>
    int global::System.IConvertible.ToInt32(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToInt32(provider);

    /// <inheritdoc/>
    long global::System.IConvertible.ToInt64(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToInt64(provider);

    /// <inheritdoc/>
    sbyte global::System.IConvertible.ToSByte(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToSByte(provider);

    /// <inheritdoc/>
    float global::System.IConvertible.ToSingle(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToSingle(provider);

    /// <inheritdoc/>
    string global::System.IConvertible.ToString(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToString(provider);

    /// <inheritdoc/>
    object global::System.IConvertible.ToType(Type conversionType, global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToType(conversionType, provider);

    /// <inheritdoc/>
    ushort global::System.IConvertible.ToUInt16(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToUInt16(provider);

    /// <inheritdoc/>
    uint global::System.IConvertible.ToUInt32(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToUInt32(provider);

    /// <inheritdoc/>
    ulong global::System.IConvertible.ToUInt64(global::System.IFormatProvider? provider) => ((global::System.IConvertible)(DateTime)_valueOrThrow).ToUInt64(provider);

    #endregion

    #region IXmlSerializable Implementation

    /// <inheritdoc/>
    public XmlSchema? GetSchema() => null;

    /// <inheritdoc/>
    public void ReadXml(XmlReader reader)
    {
        var value = reader.ReadElementContentAs<DateTime>();
        ValidateOrThrow(value);
        System.Runtime.CompilerServices.Unsafe.AsRef(in _value) = value;
        System.Runtime.CompilerServices.Unsafe.AsRef(in _isInitialized) = true;
    }

    /// <inheritdoc/>
    public void WriteXml(XmlWriter writer) => writer.WriteValue(((DateTime)_valueOrThrow).ToXmlString());

    #endregion

    #region Implicit Operators

    /// <summary>Implicit conversion from <see cref = "DateTime"/> to <see cref = "DateTimePrimitive"/></summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static implicit operator DateTimePrimitive(DateTime value) => new(value);

    /// <summary>Implicit conversion from <see cref = "DateTime"/> (nullable) to <see cref = "DateTimePrimitive"/> (nullable)</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [return: NotNullIfNotNull(nameof(value))]
    public static implicit operator DateTimePrimitive?(DateTime? value) => value is null ? null : new(value.Value);

    /// <summary>Implicit conversion from <see cref = "DateTimePrimitive"/> to <see cref = "DateTime"/></summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static implicit operator DateTime(DateTimePrimitive value) => (DateTime)value._valueOrThrow;

    /// <summary>Implicit conversion from <see cref = "DateTimePrimitive"/> (nullable) to <see cref = "DateTime"/> (nullable)</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [return: NotNullIfNotNull(nameof(value))]
    public static implicit operator DateTime?(DateTimePrimitive? value) => value is null ? null : (DateTime?)value.Value._valueOrThrow;

    #endregion

    #region Comparison Operators

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator <(DateTimePrimitive left, DateTimePrimitive right) => left._valueOrThrow < right._valueOrThrow;

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator <=(DateTimePrimitive left, DateTimePrimitive right) => left._valueOrThrow <= right._valueOrThrow;

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator >(DateTimePrimitive left, DateTimePrimitive right) => left._valueOrThrow > right._valueOrThrow;

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator >=(DateTimePrimitive left, DateTimePrimitive right) => left._valueOrThrow >= right._valueOrThrow;

    #endregion

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override string ToString() => _valueOrThrow.ToString();

    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override int GetHashCode() => _valueOrThrow.GetHashCode();
}
