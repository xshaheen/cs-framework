//HintName: DecimalPrimitiveJsonConverter.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'Primitives Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Framework.Primitives;
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;
using System.Text.Json.Serialization.Metadata;
using Framework.Generator.Primitives;

namespace Framework.Primitives.Converters;

/// <summary>JsonConverter for <see cref = "DecimalPrimitive"/></summary>
public sealed class DecimalPrimitiveJsonConverter : JsonConverter<DecimalPrimitive>
{
    /// <inheritdoc/>
    public override DecimalPrimitive Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        try
        {
            return JsonInternalConverters.DecimalConverter.Read(ref reader, typeToConvert, options);
        }
        catch (InvalidPrimitiveValueException ex)
        {
            throw new JsonException(ex.Message);
        }
    }

    /// <inheritdoc/>
    public override void Write(Utf8JsonWriter writer, DecimalPrimitive value, JsonSerializerOptions options)
    {
        JsonInternalConverters.DecimalConverter.Write(writer, (decimal)value, options);
    }

    /// <inheritdoc/>
    public override DecimalPrimitive ReadAsPropertyName(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        try
        {
            return JsonInternalConverters.DecimalConverter.ReadAsPropertyName(ref reader, typeToConvert, options);
        }
        catch (InvalidPrimitiveValueException ex)
        {
            throw new JsonException(ex.Message);
        }
    }

    /// <inheritdoc/>
    public override void WriteAsPropertyName(Utf8JsonWriter writer, DecimalPrimitive value, JsonSerializerOptions options)
    {
        JsonInternalConverters.DecimalConverter.WriteAsPropertyName(writer, (decimal)value, options);
    }
}
