//HintName: IntOfIntPrimitiveDapperTypeHandler.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'Primitives Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Globalization;
using Framework.Primitives;
using Framework.Generator.Primitives;

namespace Framework.Primitives.Converters;

/// <summary>Dapper TypeHandler for <see cref = "IntOfIntPrimitive"/></summary>
public sealed class IntOfIntPrimitiveDapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<IntOfIntPrimitive>
{
    public override void SetValue(global::System.Data.IDbDataParameter parameter, IntOfIntPrimitive value)
    {
        parameter.Value = value.GetUnderlyingPrimitiveType();
    }

    public override IntOfIntPrimitive Parse(object value)
    {
        return value switch
        {
            byte byteValue => new IntOfIntPrimitive(byteValue)
            int intValue => new IntOfIntPrimitive(intValue)
            short shortValue => new IntOfIntPrimitive(shortValue)
            long longValue and < int.MaxValue and > int.MinValue => new IntOfIntPrimitive((int)longValue)
            decimal decimalValue and < int.MaxValue and > int.MinValue => new IntOfIntPrimitive((int)decimalValue)
            string stringValue when !string.IsNullOrEmpty(stringValue) && int.TryParse(stringValue, global::System.Globalization.CultureInfo.InvariantCulture, out var result) => new IntOfIntPrimitive(result)
            _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to IntOfIntPrimitive"),
        };
    }
}
