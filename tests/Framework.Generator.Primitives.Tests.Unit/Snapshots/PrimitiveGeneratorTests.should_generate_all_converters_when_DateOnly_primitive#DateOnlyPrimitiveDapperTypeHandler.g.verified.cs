//HintName: DateOnlyPrimitiveDapperTypeHandler.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'Primitives Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Globalization;
using Framework.Primitives;
using Framework.Generator.Primitives;

namespace Framework.Primitives.Converters;

/// <summary>Dapper TypeHandler for <see cref = "DateOnlyPrimitive"/></summary>
public sealed class DateOnlyPrimitiveDapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<DateOnlyPrimitive>
{
    public override void SetValue(global::System.Data.IDbDataParameter parameter, DateOnlyPrimitive value)
    {
        parameter.Value = value.GetUnderlyingPrimitiveType();
    }

    public override DateOnlyPrimitive Parse(object value)
    {
        return value switch
        {
            global::System.DateOnly dateOnly => new DateOnlyPrimitive(dateOnly)
            global::System.DateTime dateTime => new DateOnlyPrimitive(global::System.DateOnly.FromDateTime(dateTime))
            global::System.DateTimeOffset dateTimeOffset => new DateOnlyPrimitive(global::System.DateOnly.FromDateTime(dateTimeOffset.DateTime))
            string stringValue when !string.IsNullOrEmpty(stringValue) && global::System.DateOnly.TryParse(stringValue, global::System.Globalization.CultureInfo.InvariantCulture, out var result) => new DateOnlyPrimitive(result)
            _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to DateOnlyPrimitive"),
        };
    }
}
